# -*- coding: utf-8 -*-
"""Copy of aistudio_gemini_prompt_freeform_b64.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19aoDRarWIMDnyOdHWp6sgPyVO-LzbMCM

##### Copyright 2023 Google LLC
"""

#@title Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""## Setup

### Install & import
"""

!pip install -U -q google-generativeai

# Install the client library and import necessary modules.
import google.generativeai as genai

import base64
import io
import json
import mimetypes
import pathlib
import pprint
import requests

import PIL.Image
import IPython.display
from IPython.display import Markdown

"""

### Mount Google Drive"""

from google.colab import drive
drive.mount('/gdrive')

"""## Set the API key

Add your API_KEY to the secrets manager in the left pannel "ðŸ”‘".
"""

from google.colab import userdata

API_KEY=userdata.get('secretName')

# Configure the client library by providing your API key.
genai.configure(api_key=API_KEY)

"""### Parse the arguments"""

model = 'gemini-pro' # @param {isTemplate: true}
contents_b64 = 'W3sicGFydHMiOlt7InRleHQiOiJDYW4geW91IGhlbHAgYnVpbGQgYSBtb2RlbCB0byBpZGVudGlmeSB3aGljaCBlc3NheSB3YXMgd3JpdHRlbiBieSBtaWRkbGUgYW5kIGhpZ2ggc2Nob29sIHN0dWRlbnRzLCBhbmQgd2hpY2ggd2FzIHdyaXR0ZW4gdXNpbmcgYSBsYXJnZSBsYW5ndWFnZSBtb2RlbD8gV2l0aCB0aGUgc3ByZWFkIG9mIExMTXMsIG1hbnkgcGVvcGxlIGZlYXIgdGhleSB3aWxsIHJlcGxhY2Ugb3IgYWx0ZXIgd29yayB0aGF0IHdvdWxkIHVzdWFsbHkgYmUgZG9uZSBieSBodW1hbnMuIEVkdWNhdG9ycyBhcmUgZXNwZWNpYWxseSBjb25jZXJuZWQgYWJvdXQgdGhlaXIgaW1wYWN0IG9uIHN0dWRlbnRz4oCZIHNraWxsIGRldmVsb3BtZW50LCB0aG91Z2ggbWFueSByZW1haW4gb3B0aW1pc3RpYyB0aGF0IExMTXMgd2lsbCB1bHRpbWF0ZWx5IGJlIGEgdXNlZnVsIHRvb2wgdG8gaGVscCBzdHVkZW50cyBpbXByb3ZlIHRoZWlyIHdyaXRpbmcgc2tpbGxzLiJ9XX1d' # @param {isTemplate: true}
generation_config_b64 = 'eyJ0ZW1wZXJhdHVyZSI6MC45LCJ0b3BfcCI6MSwidG9wX2siOjEsIm1heF9vdXRwdXRfdG9rZW5zIjoyMDQ4LCJzdG9wX3NlcXVlbmNlcyI6W119' # @param {isTemplate: true}
safety_settings_b64 = 'W3siY2F0ZWdvcnkiOiJIQVJNX0NBVEVHT1JZX0hBUkFTU01FTlQiLCJ0aHJlc2hvbGQiOiJCTE9DS19NRURJVU1fQU5EX0FCT1ZFIn0seyJjYXRlZ29yeSI6IkhBUk1fQ0FURUdPUllfSEFURV9TUEVFQ0giLCJ0aHJlc2hvbGQiOiJCTE9DS19NRURJVU1fQU5EX0FCT1ZFIn0seyJjYXRlZ29yeSI6IkhBUk1fQ0FURUdPUllfU0VYVUFMTFlfRVhQTElDSVQiLCJ0aHJlc2hvbGQiOiJCTE9DS19NRURJVU1fQU5EX0FCT1ZFIn0seyJjYXRlZ29yeSI6IkhBUk1fQ0FURUdPUllfREFOR0VST1VTX0NPTlRFTlQiLCJ0aHJlc2hvbGQiOiJCTE9DS19NRURJVU1fQU5EX0FCT1ZFIn1d' # @param {isTemplate: true}

contents = json.loads(base64.b64decode(contents_b64))
generation_config = json.loads(base64.b64decode(generation_config_b64))
safety_settings = json.loads(base64.b64decode(safety_settings_b64))

stream = False

contents

generation_config

safety_settings

"""### Load image data from Drive-IDs"""

for content in contents:
  for n, part in enumerate(content['parts']):
    if image:=part.get('image', None):
      if drive_id:=image.get('drive_id', None):
        path = next(pathlib.Path(f'/gdrive/.shortcut-targets-by-id/{drive_id}').glob('*'))
        data = path.read_bytes()
        mime_type, _ = mimetypes.guess_type(path)
      elif image_url:=image.get('image_url', None):
        response = requests.get(image_url)
        data = response.content
        mime_type = response.headers['content-type']
      else:
        raise ValueError('Either drive_id or image_url must be provided.')

      if mime_type is None:
        # Guess!
        mime_type = 'image/png'

      blob = {'data': data, 'mime_type': mime_type}
      content['parts'][n] = {'inline_data': blob}

import IPython.display
import PIL.Image
import io

for content in contents:
    for part in content['parts']:
        if text := part.get('text', None):
            print(text)
        elif data := part.get('inline_data', None):
            img = PIL.Image.open(io.BytesIO(data['data']))
            img.thumbnail([512,512])
            IPython.display.display(img)
    print('_'*80)

"""### Call the API"""

# Call the model and print the response.
gemini = genai.GenerativeModel(model_name=model)
contents="Analyze the provided news article write date,number of words, number of spaces, wordcloud and identify the key themes and underlying motivations of the individuals involved in six lines."
response = gemini.generate_content(
    contents,
    generation_config=generation_config,
    safety_settings=safety_settings,
    stream=False)

if generation_config.get('candidate_count', 1) == 1:
  display(Markdown(response.text))
else:
  print(response.candidates)

response.candidates

response.prompt_feedback

